{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cards","name","addCard","Math","floor","random","SpanSpace","react_default","a","createElement","App","defaultState","concat","Object","toConsumableArray","Array","fill","map","state","value","tablue","_this","handleChange","event","setState","_this2","this","_this$state","className","_ref","index","key","App_SpanSpace","BottomNavigation_default","onChange","showLabels","BottomNavigationAction_default","label","icon","Refresh_default","onClick","CompareArrows_default","filter","_ref2","arr","Add_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAYMA,EAAQ,CAAC,CACbC,KAAM,UACL,CACDA,KAAM,QACL,CACDA,KAAM,MACL,CACDA,KAAM,OAEFC,EAAU,kBAAMF,EAAMG,KAAKC,MAAsB,EAAhBD,KAAKE,YAEtCC,EAAY,kBAAMC,EAAAC,EAAAC,cAAA,uBA8EHC,6MA3EnBC,aAAe,kBAAOX,EAAM,IAAbY,OAAAC,OAAAC,EAAA,EAAAD,CAAoBE,MAAM,GAAGC,KAAK,GAAGC,IAAI,kBAAMf,WAE9DgB,MAAQ,CACNC,MAAO,EACPC,OAAOP,OAAAC,EAAA,EAAAD,CAAKQ,EAAKV,mBAInBW,aAAe,SAACC,EAAOJ,GACrBE,EAAKG,SAAS,CACZL,mFAGK,IAAAM,EAAAC,KAAAC,EAIDD,KAAKR,MAFPC,EAFGQ,EAEHR,MACAC,EAHGO,EAGHP,OAEF,OAASb,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,OACImB,UAAY,UADhB,IAEER,EAAOH,IAAI,SAAAY,EAENC,GAFM,IACP7B,EADO4B,EACP5B,KADO,OAEIM,EAAAC,EAAAC,cAAA,QAAOsB,IAAG,GAAAnB,OAClBX,EADkB,KAAAW,OACVkB,IADA,IAGX7B,EAHW,IAIXM,EAAAC,EAAAC,cAAEuB,EAAF,MAJW,QAMbzB,EAAAC,EAAAC,cACAwB,EAAAzB,EADA,CACiBoB,UAAY,SAC7BT,MACEA,EAEFe,SACER,KAAKJ,aAEPa,YAAU,GACV5B,EAAAC,EAAAC,cACA2B,EAAA5B,EADA,CACuB6B,MAAQ,QAC/BC,KAAS/B,EAAAC,EAAAC,cAAE8B,EAAA/B,EAAF,MAGTgC,QACE,kBAAMf,EAAKD,SAAS,CAClBJ,OAAQK,EAAKd,oBAhBjB,IAmBGJ,EAAAC,EAAAC,cACH2B,EAAA5B,EADG,CACoB6B,MAAQ,WAC/BC,KAAS/B,EAAAC,EAAAC,cAAEgC,EAAAjC,EAAF,MAETgC,QACE,kBACAf,EAAKD,SAAS,CACZJ,OAAQA,EAAOsB,OAAO,SAAAC,EAEnBb,EAAOc,GAFY,IACpB3C,EADoB0C,EACpB1C,KADoB,OAEJ6B,GAAQ7B,IAAS2C,EAAId,EAAQ,GAAG7B,YA5BtD,IA+BGM,EAAAC,EAAAC,cACH2B,EAAA5B,EADG,CACoB6B,MAAQ,MAC/BC,KAAS/B,EAAAC,EAAAC,cAAEoC,EAAArC,EAAF,MAETgC,QACE,kBAAMf,EAAKD,SAAS,CAClBJ,OAAM,GAAAR,OAAAC,OAAAC,EAAA,EAAAD,CAAMO,GAAN,CAAclB,WArCxB,KAXG,YAnBG4C,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.91aa411f.chunk.js","sourcesContent":["import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport CompareArrowsIcon from '@material-ui/icons/CompareArrows';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst LONGEST_WORD_LENGTH = 6\n\nconst cards = [{\n  name: 'tomato'\n}, {\n  name: 'mato'\n}, {\n  name: 'to'\n}, {\n  name: 'ma'\n}, ]\nconst addCard = () => cards[Math.floor(Math.random() * 4)]\n\nconst SpanSpace = () => < span > &nbsp; < /span>\n\nclass App extends Component {\n  defaultState = () => [cards[0], ...Array(3).fill(1).map(() => addCard())]\n\n  state = {\n    value: 0,\n    tablue: [...this.defaultState()],\n  };\n\n\n  handleChange = (event, value) => {\n    this.setState({\n      value\n    });\n  };\n  render() {\n      const {\n        value,\n        tablue\n      } = this.state;\n      return ( < div >\n        <\n        div className = \"tablue\" > {\n          tablue.map(({\n              name\n            }, index) => < span key = {\n              `${name}-${index}`\n            } > {\n              name\n            } < SpanSpace / > < /span>)}</div >\n\n            <\n            BottomNavigation className = \"navbar\"\n            value = {\n              value\n            }\n            onChange = {\n              this.handleChange\n            }\n            showLabels >\n            <\n            BottomNavigationAction label = \"Reset\"\n            icon = { < RefreshIcon / >\n\n            }\n            onClick = {\n              () => this.setState({\n                tablue: this.defaultState()\n              })\n            }\n            /> <\n            BottomNavigationAction label = \"Condense\"\n            icon = { < CompareArrowsIcon / >\n            }\n            onClick = {\n              () =>\n              this.setState({\n                tablue: tablue.filter(({\n                  name\n                }, index, arr) => index ? name !== arr[index - 1].name : true)\n              })\n            }\n            /> <\n            BottomNavigationAction label = \"Add\"\n            icon = { < AddIcon / >\n            }\n            onClick = {\n              () => this.setState({\n                tablue: [...tablue, addCard()]\n              })\n            }\n            /> < /\n            BottomNavigation > < /div>\n          );\n        }\n      }\n\n      export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}